//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fr.Service
{ 
    using Fr.IService;
    using Fr.IRepositories;
    using Fr.Repositories;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Fr.Model;
    using Fr.Utilily;

    public partial class SysCompanyService : ISysCompanyService
    {
        ISysCompanyRepository _repository;

        /// <summary>
        /// 构造函数注入
        /// </summary>
        /// <param name="repository"></param>
        public SysCompanyService(ISysCompanyRepository repository)
        {
            _repository = repository;
        }


        public List<SysCompany> GetCompanyList()
        {
            var source = _repository.Source.Where(c => c.Status == RecordStateEnum.启用).OrderBy(c => c.CompanyName).ToList();
            return source;
        }

        /// <summary>
        /// 获取公司信息
        /// </summary>
        /// <param name="keyId"></param>
        /// <returns></returns>
        public SysCompany GetCompanyInfo(string keyId)
        {
            var entity = _repository.Find(c => c.CompanyId == keyId && c.Status == RecordStateEnum.启用).FirstOrDefault();
            return entity;
        }

        /// <summary>
        /// 保存公司信息
        /// </summary>
        /// <param name="keyId"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public bool SaveCompanyInfo(string keyId, SysCompany data)
        {
            var user = SysUserHelper.CurrentUser;
            SysCompany entity;
            if (!string.IsNullOrEmpty(keyId))
            {
                entity = _repository.Find(c => c.CompanyId == keyId).FirstOrDefault();
                if (entity != null)
                {
                    entity.ModifyTime = DateTime.Now;
                    entity.ModifyUserId = user.UserId;
                    entity.ModifyUserName = user.NickName;
                    entity.Status = RecordStateEnum.启用;
                }
            }
            else
            {
                entity = new SysCompany()
                {
                    CreateTime = DateTime.Now,
                    CreateUserId = user.UserId,
                    CreateUserName = user.NickName,
                    ModifyTime = DateTime.Now,
                    ModifyUserId = user.UserId,
                    ModifyUserName = user.NickName,
                    CompanyName = data.CompanyName,
                    Status = RecordStateEnum.启用
                };
            }
            entity.ParentId = data.ParentId;
            entity.Remark = data.Remark;
            entity.AccountInfo = data.AccountInfo;
            entity.Adress = data.Adress;
            entity.CompanyName = data.CompanyName;
            entity.Contact = data.Contact;
            entity.Email = data.Email;
            entity.Fax = data.Fax;
            entity.Manager = data.Manager;
            entity.Nature = data.Nature;
            entity.SortOrder = data.SortOrder;
            if (string.IsNullOrEmpty(entity.CompanyId))
            {
                entity.CompanyId = Guid.NewGuid().ToString("N");
                _repository.Insert(entity);
            }
            else
            {
                _repository.Save(entity);
            }
            return true;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="keyId"></param>
        public void Delete(string keyId)
        {
            var entity = _repository.Find(c => c.CompanyId == keyId && c.Status == RecordStateEnum.启用).FirstOrDefault();
            if (entity != null)
            {
                var hasChild = _repository.Find(c => c.ParentId == keyId && c.Status == RecordStateEnum.启用).Any();
                if (hasChild)
                    throw new Exception("拥有子公司，不允许删除！");
                entity.Status = RecordStateEnum.删除;
                _repository.Save(entity);
            }
        }
    }	
}
